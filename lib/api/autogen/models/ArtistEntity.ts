/* tslint:disable */
/* eslint-disable */
/**
 * lineup-backstage
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ImageEntity } from './ImageEntity';
import {
    ImageEntityFromJSON,
    ImageEntityFromJSONTyped,
    ImageEntityToJSON,
    ImageEntityToJSONTyped,
} from './ImageEntity';

/**
 * 
 * @export
 * @interface ArtistEntity
 */
export interface ArtistEntity {
    /**
     * Stringified UUIDv4.
     * See [RFC 4112](https://tools.ietf.org/html/rfc4122)
     * @type {string}
     * @memberof ArtistEntity
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof ArtistEntity
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ArtistEntity
     */
    updatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ArtistEntity
     */
    deletedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof ArtistEntity
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ArtistEntity
     */
    genre: string;
    /**
     * 
     * @type {string}
     * @memberof ArtistEntity
     */
    bio?: string;
    /**
     * 
     * @type {ImageEntity}
     * @memberof ArtistEntity
     */
    imageUrl?: ImageEntity;
}

/**
 * Check if a given object implements the ArtistEntity interface.
 */
export function instanceOfArtistEntity(value: object): value is ArtistEntity {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('genre' in value) || value['genre'] === undefined) return false;
    return true;
}

export function ArtistEntityFromJSON(json: any): ArtistEntity {
    return ArtistEntityFromJSONTyped(json, false);
}

export function ArtistEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): ArtistEntity {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
        'deletedAt': json['deletedAt'] == null ? undefined : (new Date(json['deletedAt'])),
        'name': json['name'],
        'genre': json['genre'],
        'bio': json['bio'] == null ? undefined : json['bio'],
        'imageUrl': json['imageUrl'] == null ? undefined : ImageEntityFromJSON(json['imageUrl']),
    };
}

export function ArtistEntityToJSON(json: any): ArtistEntity {
    return ArtistEntityToJSONTyped(json, false);
}

export function ArtistEntityToJSONTyped(value?: ArtistEntity | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
        'deletedAt': value['deletedAt'] == null ? undefined : ((value['deletedAt']).toISOString()),
        'name': value['name'],
        'genre': value['genre'],
        'bio': value['bio'],
        'imageUrl': ImageEntityToJSON(value['imageUrl']),
    };
}

