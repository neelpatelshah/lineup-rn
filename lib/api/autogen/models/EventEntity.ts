/* tslint:disable */
/* eslint-disable */
/**
 * lineup-backstage
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PerformanceSetEntity } from './PerformanceSetEntity';
import {
    PerformanceSetEntityFromJSON,
    PerformanceSetEntityFromJSONTyped,
    PerformanceSetEntityToJSON,
    PerformanceSetEntityToJSONTyped,
} from './PerformanceSetEntity';
import type { ImageEntity } from './ImageEntity';
import {
    ImageEntityFromJSON,
    ImageEntityFromJSONTyped,
    ImageEntityToJSON,
    ImageEntityToJSONTyped,
} from './ImageEntity';
import type { VenueEntity } from './VenueEntity';
import {
    VenueEntityFromJSON,
    VenueEntityFromJSONTyped,
    VenueEntityToJSON,
    VenueEntityToJSONTyped,
} from './VenueEntity';

/**
 * 
 * @export
 * @interface EventEntity
 */
export interface EventEntity {
    /**
     * Stringified UUIDv4.
     * See [RFC 4112](https://tools.ietf.org/html/rfc4122)
     * @type {string}
     * @memberof EventEntity
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof EventEntity
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof EventEntity
     */
    updatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof EventEntity
     */
    deletedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof EventEntity
     */
    name: string;
    /**
     * 
     * @type {Date}
     * @memberof EventEntity
     */
    eventStart: Date;
    /**
     * 
     * @type {string}
     * @memberof EventEntity
     */
    eventDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof EventEntity
     */
    eventGenre?: string;
    /**
     * 
     * @type {Array<ImageEntity>}
     * @memberof EventEntity
     */
    eventImages?: Array<ImageEntity>;
    /**
     * 
     * @type {VenueEntity}
     * @memberof EventEntity
     */
    eventLocation?: VenueEntity;
    /**
     * 
     * @type {Array<PerformanceSetEntity>}
     * @memberof EventEntity
     */
    performanceSets?: Array<PerformanceSetEntity>;
}

/**
 * Check if a given object implements the EventEntity interface.
 */
export function instanceOfEventEntity(value: object): value is EventEntity {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('eventStart' in value) || value['eventStart'] === undefined) return false;
    return true;
}

export function EventEntityFromJSON(json: any): EventEntity {
    return EventEntityFromJSONTyped(json, false);
}

export function EventEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventEntity {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
        'deletedAt': json['deletedAt'] == null ? undefined : (new Date(json['deletedAt'])),
        'name': json['name'],
        'eventStart': (new Date(json['eventStart'])),
        'eventDescription': json['eventDescription'] == null ? undefined : json['eventDescription'],
        'eventGenre': json['eventGenre'] == null ? undefined : json['eventGenre'],
        'eventImages': json['eventImages'] == null ? undefined : ((json['eventImages'] as Array<any>).map(ImageEntityFromJSON)),
        'eventLocation': json['eventLocation'] == null ? undefined : VenueEntityFromJSON(json['eventLocation']),
        'performanceSets': json['performanceSets'] == null ? undefined : ((json['performanceSets'] as Array<any>).map(PerformanceSetEntityFromJSON)),
    };
}

export function EventEntityToJSON(json: any): EventEntity {
    return EventEntityToJSONTyped(json, false);
}

export function EventEntityToJSONTyped(value?: EventEntity | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
        'deletedAt': value['deletedAt'] == null ? undefined : ((value['deletedAt']).toISOString()),
        'name': value['name'],
        'eventStart': ((value['eventStart']).toISOString()),
        'eventDescription': value['eventDescription'],
        'eventGenre': value['eventGenre'],
        'eventImages': value['eventImages'] == null ? undefined : ((value['eventImages'] as Array<any>).map(ImageEntityToJSON)),
        'eventLocation': VenueEntityToJSON(value['eventLocation']),
        'performanceSets': value['performanceSets'] == null ? undefined : ((value['performanceSets'] as Array<any>).map(PerformanceSetEntityToJSON)),
    };
}

