/* tslint:disable */
/* eslint-disable */
/**
 * lineup-backstage
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ArtistEntity } from './ArtistEntity';
import {
    ArtistEntityFromJSON,
    ArtistEntityFromJSONTyped,
    ArtistEntityToJSON,
    ArtistEntityToJSONTyped,
} from './ArtistEntity';
import type { VenueEntity } from './VenueEntity';
import {
    VenueEntityFromJSON,
    VenueEntityFromJSONTyped,
    VenueEntityToJSON,
    VenueEntityToJSONTyped,
} from './VenueEntity';
import type { EventEntity } from './EventEntity';
import {
    EventEntityFromJSON,
    EventEntityFromJSONTyped,
    EventEntityToJSON,
    EventEntityToJSONTyped,
} from './EventEntity';
import type { StageEntity } from './StageEntity';
import {
    StageEntityFromJSON,
    StageEntityFromJSONTyped,
    StageEntityToJSON,
    StageEntityToJSONTyped,
} from './StageEntity';

/**
 * 
 * @export
 * @interface PerformanceSetEntity
 */
export interface PerformanceSetEntity {
    /**
     * Stringified UUIDv4.
     * See [RFC 4112](https://tools.ietf.org/html/rfc4122)
     * @type {string}
     * @memberof PerformanceSetEntity
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof PerformanceSetEntity
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PerformanceSetEntity
     */
    updatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PerformanceSetEntity
     */
    deletedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof PerformanceSetEntity
     */
    name: string;
    /**
     * 
     * @type {Date}
     * @memberof PerformanceSetEntity
     */
    startTime: Date;
    /**
     * 
     * @type {Date}
     * @memberof PerformanceSetEntity
     */
    endTime?: Date;
    /**
     * 
     * @type {ArtistEntity}
     * @memberof PerformanceSetEntity
     */
    artistId: ArtistEntity;
    /**
     * 
     * @type {StageEntity}
     * @memberof PerformanceSetEntity
     */
    stageId?: StageEntity;
    /**
     * 
     * @type {VenueEntity}
     * @memberof PerformanceSetEntity
     */
    venueId: VenueEntity;
    /**
     * 
     * @type {EventEntity}
     * @memberof PerformanceSetEntity
     */
    eventId: EventEntity;
}

/**
 * Check if a given object implements the PerformanceSetEntity interface.
 */
export function instanceOfPerformanceSetEntity(value: object): value is PerformanceSetEntity {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('startTime' in value) || value['startTime'] === undefined) return false;
    if (!('artistId' in value) || value['artistId'] === undefined) return false;
    if (!('venueId' in value) || value['venueId'] === undefined) return false;
    if (!('eventId' in value) || value['eventId'] === undefined) return false;
    return true;
}

export function PerformanceSetEntityFromJSON(json: any): PerformanceSetEntity {
    return PerformanceSetEntityFromJSONTyped(json, false);
}

export function PerformanceSetEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): PerformanceSetEntity {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
        'deletedAt': json['deletedAt'] == null ? undefined : (new Date(json['deletedAt'])),
        'name': json['name'],
        'startTime': (new Date(json['startTime'])),
        'endTime': json['endTime'] == null ? undefined : (new Date(json['endTime'])),
        'artistId': ArtistEntityFromJSON(json['artistId']),
        'stageId': json['stageId'] == null ? undefined : StageEntityFromJSON(json['stageId']),
        'venueId': VenueEntityFromJSON(json['venueId']),
        'eventId': EventEntityFromJSON(json['eventId']),
    };
}

export function PerformanceSetEntityToJSON(json: any): PerformanceSetEntity {
    return PerformanceSetEntityToJSONTyped(json, false);
}

export function PerformanceSetEntityToJSONTyped(value?: PerformanceSetEntity | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
        'deletedAt': value['deletedAt'] == null ? undefined : ((value['deletedAt']).toISOString()),
        'name': value['name'],
        'startTime': ((value['startTime']).toISOString()),
        'endTime': value['endTime'] == null ? undefined : ((value['endTime']).toISOString()),
        'artistId': ArtistEntityToJSON(value['artistId']),
        'stageId': StageEntityToJSON(value['stageId']),
        'venueId': VenueEntityToJSON(value['venueId']),
        'eventId': EventEntityToJSON(value['eventId']),
    };
}

