/* tslint:disable */
/* eslint-disable */
/**
 * lineup-backstage
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EventEntity,
  PartialArtistCreateParams,
  PartialEventCreateParams,
  PartialImageCreateParams,
  PickArtistExcludeKeyofArtistId,
  PickClassPropertiesArtistEntityExcludeKeyofClassPropertiesArtistEntityCreatedAtOrUpdatedAtOrDeletedAt,
  PickClassPropertiesEventEntityExcludeKeyofClassPropertiesEventEntityCreatedAtOrUpdatedAtOrDeletedAt,
  PickEventExcludeKeyofEventId,
  PickImageExcludeKeyofImageId,
  PickSimpleDTOClassPropertiesImageEntityExcludeKeyofSimpleDTOClassPropertiesImageEntityPersistedStatus,
} from '../models/index';
import {
    EventEntityFromJSON,
    EventEntityToJSON,
    PartialArtistCreateParamsFromJSON,
    PartialArtistCreateParamsToJSON,
    PartialEventCreateParamsFromJSON,
    PartialEventCreateParamsToJSON,
    PartialImageCreateParamsFromJSON,
    PartialImageCreateParamsToJSON,
    PickArtistExcludeKeyofArtistIdFromJSON,
    PickArtistExcludeKeyofArtistIdToJSON,
    PickClassPropertiesArtistEntityExcludeKeyofClassPropertiesArtistEntityCreatedAtOrUpdatedAtOrDeletedAtFromJSON,
    PickClassPropertiesArtistEntityExcludeKeyofClassPropertiesArtistEntityCreatedAtOrUpdatedAtOrDeletedAtToJSON,
    PickClassPropertiesEventEntityExcludeKeyofClassPropertiesEventEntityCreatedAtOrUpdatedAtOrDeletedAtFromJSON,
    PickClassPropertiesEventEntityExcludeKeyofClassPropertiesEventEntityCreatedAtOrUpdatedAtOrDeletedAtToJSON,
    PickEventExcludeKeyofEventIdFromJSON,
    PickEventExcludeKeyofEventIdToJSON,
    PickImageExcludeKeyofImageIdFromJSON,
    PickImageExcludeKeyofImageIdToJSON,
    PickSimpleDTOClassPropertiesImageEntityExcludeKeyofSimpleDTOClassPropertiesImageEntityPersistedStatusFromJSON,
    PickSimpleDTOClassPropertiesImageEntityExcludeKeyofSimpleDTOClassPropertiesImageEntityPersistedStatusToJSON,
} from '../models/index';

export interface CreateArtistRequest {
    body: PickArtistExcludeKeyofArtistId;
}

export interface CreateEventRequest {
    body: PickEventExcludeKeyofEventId;
}

export interface CreateImageRequest {
    body: PickImageExcludeKeyofImageId;
}

export interface DeleteArtistRequest {
    id: string;
}

export interface DeleteEventRequest {
    id: string;
}

export interface DeleteImageRequest {
    id: string;
}

export interface GetArtistByIdRequest {
    id: string;
}

export interface GetEventByIdRequest {
    id: string;
}

export interface GetImageByIdRequest {
    id: string;
}

export interface UpdateArtistRequest {
    id: string;
    body: PartialArtistCreateParams;
}

export interface UpdateEventRequest {
    id: string;
    body: PartialEventCreateParams;
}

export interface UpdateImageRequest {
    id: string;
    partialImageCreateParams: PartialImageCreateParams;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create a new artist.
     */
    async createArtistRaw(requestParameters: CreateArtistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PickClassPropertiesArtistEntityExcludeKeyofClassPropertiesArtistEntityCreatedAtOrUpdatedAtOrDeletedAt>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createArtist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/artists/create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PickClassPropertiesArtistEntityExcludeKeyofClassPropertiesArtistEntityCreatedAtOrUpdatedAtOrDeletedAtFromJSON(jsonValue));
    }

    /**
     * Create a new artist.
     */
    async createArtist(requestParameters: CreateArtistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PickClassPropertiesArtistEntityExcludeKeyofClassPropertiesArtistEntityCreatedAtOrUpdatedAtOrDeletedAt> {
        const response = await this.createArtistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new event.
     */
    async createEventRaw(requestParameters: CreateEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PickClassPropertiesEventEntityExcludeKeyofClassPropertiesEventEntityCreatedAtOrUpdatedAtOrDeletedAt>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/events/create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PickClassPropertiesEventEntityExcludeKeyofClassPropertiesEventEntityCreatedAtOrUpdatedAtOrDeletedAtFromJSON(jsonValue));
    }

    /**
     * Create a new event.
     */
    async createEvent(requestParameters: CreateEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PickClassPropertiesEventEntityExcludeKeyofClassPropertiesEventEntityCreatedAtOrUpdatedAtOrDeletedAt> {
        const response = await this.createEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new image.
     */
    async createImageRaw(requestParameters: CreateImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/images/create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new image.
     */
    async createImage(requestParameters: CreateImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createImageRaw(requestParameters, initOverrides);
    }

    /**
     * Delete an artist by its ID.
     */
    async deleteArtistRaw(requestParameters: DeleteArtistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteArtist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/artists/delete/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an artist by its ID.
     */
    async deleteArtist(requestParameters: DeleteArtistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteArtistRaw(requestParameters, initOverrides);
    }

    /**
     * Delete an event by its ID.
     */
    async deleteEventRaw(requestParameters: DeleteEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/events/delete/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an event by its ID.
     */
    async deleteEvent(requestParameters: DeleteEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEventRaw(requestParameters, initOverrides);
    }

    /**
     * Delete an image by its ID.
     */
    async deleteImageRaw(requestParameters: DeleteImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/images/delete/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an image by its ID.
     */
    async deleteImage(requestParameters: DeleteImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteImageRaw(requestParameters, initOverrides);
    }

    /**
     * Get all artists.
     */
    async getAllArtistsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PickClassPropertiesArtistEntityExcludeKeyofClassPropertiesArtistEntityCreatedAtOrUpdatedAtOrDeletedAt>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/artists`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PickClassPropertiesArtistEntityExcludeKeyofClassPropertiesArtistEntityCreatedAtOrUpdatedAtOrDeletedAtFromJSON));
    }

    /**
     * Get all artists.
     */
    async getAllArtists(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PickClassPropertiesArtistEntityExcludeKeyofClassPropertiesArtistEntityCreatedAtOrUpdatedAtOrDeletedAt>> {
        const response = await this.getAllArtistsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all events.
     */
    async getAllEventsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PickClassPropertiesEventEntityExcludeKeyofClassPropertiesEventEntityCreatedAtOrUpdatedAtOrDeletedAt>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/events`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PickClassPropertiesEventEntityExcludeKeyofClassPropertiesEventEntityCreatedAtOrUpdatedAtOrDeletedAtFromJSON));
    }

    /**
     * Get all events.
     */
    async getAllEvents(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PickClassPropertiesEventEntityExcludeKeyofClassPropertiesEventEntityCreatedAtOrUpdatedAtOrDeletedAt>> {
        const response = await this.getAllEventsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get an artist by its ID.
     */
    async getArtistByIdRaw(requestParameters: GetArtistByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PickClassPropertiesArtistEntityExcludeKeyofClassPropertiesArtistEntityCreatedAtOrUpdatedAtOrDeletedAt>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getArtistById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/artists/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PickClassPropertiesArtistEntityExcludeKeyofClassPropertiesArtistEntityCreatedAtOrUpdatedAtOrDeletedAtFromJSON(jsonValue));
    }

    /**
     * Get an artist by its ID.
     */
    async getArtistById(requestParameters: GetArtistByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PickClassPropertiesArtistEntityExcludeKeyofClassPropertiesArtistEntityCreatedAtOrUpdatedAtOrDeletedAt> {
        const response = await this.getArtistByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an event by its ID.
     */
    async getEventByIdRaw(requestParameters: GetEventByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PickClassPropertiesEventEntityExcludeKeyofClassPropertiesEventEntityCreatedAtOrUpdatedAtOrDeletedAt>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getEventById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/events/single/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PickClassPropertiesEventEntityExcludeKeyofClassPropertiesEventEntityCreatedAtOrUpdatedAtOrDeletedAtFromJSON(jsonValue));
    }

    /**
     * Get an event by its ID.
     */
    async getEventById(requestParameters: GetEventByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PickClassPropertiesEventEntityExcludeKeyofClassPropertiesEventEntityCreatedAtOrUpdatedAtOrDeletedAt> {
        const response = await this.getEventByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an image by its ID.
     */
    async getImageByIdRaw(requestParameters: GetImageByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PickSimpleDTOClassPropertiesImageEntityExcludeKeyofSimpleDTOClassPropertiesImageEntityPersistedStatus>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getImageById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/images/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PickSimpleDTOClassPropertiesImageEntityExcludeKeyofSimpleDTOClassPropertiesImageEntityPersistedStatusFromJSON(jsonValue));
    }

    /**
     * Get an image by its ID.
     */
    async getImageById(requestParameters: GetImageByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PickSimpleDTOClassPropertiesImageEntityExcludeKeyofSimpleDTOClassPropertiesImageEntityPersistedStatus> {
        const response = await this.getImageByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch events from Ticketmaster API, persist them, and map attractions to performance sets.
     */
    async getTicketmasterEventsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/events/ticketmaster`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Fetch events from Ticketmaster API, persist them, and map attractions to performance sets.
     */
    async getTicketmasterEvents(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getTicketmasterEventsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Scrape events from Gametime.
     */
    async scrapeGametimeEventsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EventEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/events/scraper/gametime`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventEntityFromJSON));
    }

    /**
     * Scrape events from Gametime.
     */
    async scrapeGametimeEvents(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EventEntity>> {
        const response = await this.scrapeGametimeEventsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update an artist by its ID.
     */
    async updateArtistRaw(requestParameters: UpdateArtistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PickClassPropertiesArtistEntityExcludeKeyofClassPropertiesArtistEntityCreatedAtOrUpdatedAtOrDeletedAt>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateArtist().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateArtist().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/artists/update/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PickClassPropertiesArtistEntityExcludeKeyofClassPropertiesArtistEntityCreatedAtOrUpdatedAtOrDeletedAtFromJSON(jsonValue));
    }

    /**
     * Update an artist by its ID.
     */
    async updateArtist(requestParameters: UpdateArtistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PickClassPropertiesArtistEntityExcludeKeyofClassPropertiesArtistEntityCreatedAtOrUpdatedAtOrDeletedAt> {
        const response = await this.updateArtistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an event by its ID.
     */
    async updateEventRaw(requestParameters: UpdateEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PickClassPropertiesEventEntityExcludeKeyofClassPropertiesEventEntityCreatedAtOrUpdatedAtOrDeletedAt>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateEvent().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/events/update/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PickClassPropertiesEventEntityExcludeKeyofClassPropertiesEventEntityCreatedAtOrUpdatedAtOrDeletedAtFromJSON(jsonValue));
    }

    /**
     * Update an event by its ID.
     */
    async updateEvent(requestParameters: UpdateEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PickClassPropertiesEventEntityExcludeKeyofClassPropertiesEventEntityCreatedAtOrUpdatedAtOrDeletedAt> {
        const response = await this.updateEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an image by its ID.
     */
    async updateImageRaw(requestParameters: UpdateImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PickSimpleDTOClassPropertiesImageEntityExcludeKeyofSimpleDTOClassPropertiesImageEntityPersistedStatus>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateImage().'
            );
        }

        if (requestParameters['partialImageCreateParams'] == null) {
            throw new runtime.RequiredError(
                'partialImageCreateParams',
                'Required parameter "partialImageCreateParams" was null or undefined when calling updateImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/images/update/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PartialImageCreateParamsToJSON(requestParameters['partialImageCreateParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PickSimpleDTOClassPropertiesImageEntityExcludeKeyofSimpleDTOClassPropertiesImageEntityPersistedStatusFromJSON(jsonValue));
    }

    /**
     * Update an image by its ID.
     */
    async updateImage(requestParameters: UpdateImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PickSimpleDTOClassPropertiesImageEntityExcludeKeyofSimpleDTOClassPropertiesImageEntityPersistedStatus> {
        const response = await this.updateImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
